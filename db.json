{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"0f8398a3bb033437b99b018f6e17cff0a4194ae8","modified":1497881153449},{"_id":"source/CNAME","hash":"804b9607a28a3a44273fc2ad51435c0dd99cb9c6","modified":1497799194083},{"_id":"themes/beantech/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1497777625311},{"_id":"themes/beantech/_config.yml","hash":"7175f1385e6000b5f262ada8e186f802a02653b4","modified":1497885251704},{"_id":"source/_posts/jQuery-ajax-intercept.md","hash":"473631115f8726032ef382a0030938a7bdab15cb","modified":1497884843622},{"_id":"source/_posts/mousewheel-bubble.md","hash":"f5aca3c501fc9c59f4b27397c64092b232a2f47f","modified":1497883483030},{"_id":"source/about/index.md","hash":"911c5982753c5c26c922a252026db65a27d57d59","modified":1497798079308},{"_id":"source/archive/index.md","hash":"fe06e7e4db7a3ea82d29747244a760709863e5c6","modified":1497797332140},{"_id":"source/tags/index.md","hash":"438360769478be9d01783d4997c0c36da09cd72d","modified":1497797418431},{"_id":"themes/beantech/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1497777625312},{"_id":"themes/beantech/languages/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1497777625313},{"_id":"themes/beantech/languages/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1497777625313},{"_id":"themes/beantech/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1497777625314},{"_id":"themes/beantech/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1497777625314},{"_id":"themes/beantech/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1497777625344},{"_id":"themes/beantech/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1497777625345},{"_id":"themes/beantech/languages/zh-CN.yml","hash":"0231cd406ca8cc03de886468f41c6dab0b4ffe9d","modified":1497790048960},{"_id":"themes/beantech/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1497777625346},{"_id":"themes/beantech/layout/404.ejs","hash":"3f2d7438a9116acd327f968bbbfbc98d3fe398bf","modified":1497881036849},{"_id":"themes/beantech/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1497777625354},{"_id":"themes/beantech/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1497777625355},{"_id":"themes/beantech/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1497777625357},{"_id":"themes/beantech/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1497777625358},{"_id":"themes/beantech/layout/layout.ejs","hash":"b8d1cb552ace99f80000687697ff5ec297a29b02","modified":1497793373486},{"_id":"themes/beantech/layout/page.ejs","hash":"f7fc5282ad55131aa67dcde03c9189faa450a7c9","modified":1497777625362},{"_id":"themes/beantech/layout/post.ejs","hash":"919a7a894f928d5119550d99f9962e905343245d","modified":1497793651512},{"_id":"themes/beantech/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1497777625365},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"e095a8e9f5ffc10335e10c39d222748b10666022","modified":1497885625942},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"9d1acd507d5e0c99d309a9ee750827a0cb5880d0","modified":1497882222944},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"1738b3e78d27bee8e8acf953149ed14270c1a706","modified":1497794818415},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1497791608427},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1497777625350},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1497777625350},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1497777625351},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1497777625351},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1497777625352},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1497777625352},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1497777625353},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1497777625354},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"401c591f28f756e4e392e251636802aad48d2b09","modified":1497882192675},{"_id":"themes/beantech/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1497777625367},{"_id":"themes/beantech/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1497777625369},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"bd845f265379a23ca3f8f6b84eff298fb074c752","modified":1497886069359},{"_id":"themes/beantech/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1497777625382},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1497777625384},{"_id":"themes/beantech/source/css/rocket.styl","hash":"4c1e1db0d6fe0654904adb9d4aefd46a533827d6","modified":1497792589884},{"_id":"themes/beantech/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1497777625390},{"_id":"themes/beantech/source/css/toc.styl","hash":"5cbd5465aaabf8c3f75cefe331b9e495d2c62bd9","modified":1497777625391},{"_id":"themes/beantech/source/css/widget.styl","hash":"696f6c974861e9ac59cb019750e81be734230591","modified":1497882987140},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1497777625395},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1497777625525},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1497777625530},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1497777625528},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1497777625537},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1497777625537},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1497777625538},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1497777625545},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1497777625546},{"_id":"themes/beantech/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1497777625546},{"_id":"themes/beantech/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1497777625547},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1497777625380},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1497777625397},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1497777625535},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1497777625544},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1497777625376},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1497777625385},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1497777625387},{"_id":"themes/beantech/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1497777625543},{"_id":"public/post-sitemap.xml","hash":"1cf18855b6b8892ec9cbce456adff685d23cfcc0","modified":1497886128625},{"_id":"public/page-sitemap.xml","hash":"7d2e3c438e82a7e9b6003ad49c900781c8ec2111","modified":1497886128763},{"_id":"public/tag-sitemap.xml","hash":"d698532aa3d5fc3cffcfd97e00fa6ee2dbf01ded","modified":1497886128860},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1497886128862},{"_id":"public/sitemap.xml","hash":"2ca6d54329ff5692646ee23c786552e785657b13","modified":1497886128862},{"_id":"public/404.html","hash":"86373342eb31c2e269b421c9e67bc7934f89a548","modified":1497886128870},{"_id":"public/tags/index.html","hash":"7135b52fd17f7636428adcac4e8b4924e860b03e","modified":1497886128870},{"_id":"public/about/index.html","hash":"6b87cfc74fe357fb1a2d5f1d40a34efcec225cbc","modified":1497886128870},{"_id":"public/2017/06/19/jQuery-ajax-intercept/index.html","hash":"017d231011b1fede72af2c4c960bcb926832163b","modified":1497886128870},{"_id":"public/2017/06/19/mousewheel-bubble/index.html","hash":"194af8d766714e3f743724f159621151bc4abbaa","modified":1497886128870},{"_id":"public/archive/index.html","hash":"330cd0efec2e3f3a69375d1dc87d061db57aa44f","modified":1497886128870},{"_id":"public/archives/index.html","hash":"1a042f9da55f2d1accb2a8ac1901f597220acc28","modified":1497886128870},{"_id":"public/archives/2017/index.html","hash":"b70f17c7d0ccf06848214c10ea05fbbdc06a16ec","modified":1497886128871},{"_id":"public/archives/2017/06/index.html","hash":"154c6b7956076f3d480eaf662e43acf7ee181518","modified":1497886128871},{"_id":"public/index.html","hash":"2860249cbb05d4b42a841768f188d9ade881f7d9","modified":1497886128871},{"_id":"public/tags/jquery/index.html","hash":"214de7c5c15abdb5a73764f452dbccbf598cef1c","modified":1497886128871},{"_id":"public/tags/ajax/index.html","hash":"d2b1f51e48832713cc90da8379f97a23f82b6e34","modified":1497886128871},{"_id":"public/tags/事件/index.html","hash":"c61c77c629aece28eb0faa33d51615e8c1f4ae1e","modified":1497886128871},{"_id":"public/tags/javascript/index.html","hash":"a94f4a38d57197839cdd46d9fddc6cd95ea69db5","modified":1497886128871},{"_id":"public/CNAME","hash":"804b9607a28a3a44273fc2ad51435c0dd99cb9c6","modified":1497886128892},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1497886128892},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1497886128892},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1497886128893},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1497886128893},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1497886128893},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1497886128893},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1497886129543},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1497886129564},{"_id":"public/css/highlight.css","hash":"a3e7a068adcae6ee723e7e26fc2fddeba73f590b","modified":1497886129564},{"_id":"public/css/rocket.css","hash":"9a64eb003654226b3e8ee8a58ff06b4f502e79a0","modified":1497886129564},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1497886129564},{"_id":"public/css/toc.css","hash":"4a892d4d00d85f984c6aeba44a34648bb98f1861","modified":1497886129565},{"_id":"public/css/widget.css","hash":"bfb490dbb67fdfd1d1059b50ac3bb538c61c2bb9","modified":1497886129564},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1497886129565},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1497886129565},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1497886129565},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1497886129566},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1497886129567},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1497886129566},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1497886129567},{"_id":"public/css/beantech.min.css","hash":"a8acb00db92f760887c9f973900b0bbc89c88cbb","modified":1497886129567},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1497886129568},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1497886129568},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1497886129568},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1497886129568},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1497886129568},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1497886129568},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1497886129568}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"home/404.JPG","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"home/404.JPG\"\n---\n","date":"2017-06-19T14:05:53.449Z","updated":"2017-06-19T14:05:53.449Z","path":"404.html","title":"","comments":1,"_id":"cj44ahgri0000zwvrlmt1l9ba","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"会不会有一天，时间真的能倒退，退回你的我的回不去的悠悠的岁月","header-img":"home/IMG_2434.JPG","comments":1,"_content":"\n> 你说啥，大声点！\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"会不会有一天，时间真的能倒退，退回你的我的回不去的悠悠的岁月\"\nheader-img: \"home/IMG_2434.JPG\"\ncomments: true\n---\n\n> 你说啥，大声点！\n","updated":"2017-06-18T15:01:19.308Z","path":"about/index.html","_id":"cj44ahgui000bzwvrf20le6tb","content":"<blockquote>\n<p>你说啥，大声点！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>你说啥，大声点！</p>\n</blockquote>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"home/IMG_2432.JPG","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"home/IMG_2432.JPG\"\n---\n","date":"2017-06-18T14:50:18.431Z","updated":"2017-06-18T14:50:18.431Z","path":"tags/index.html","comments":1,"_id":"cj44ahgup000czwvr0lrqtngu","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"home/IMG_2433.JPG","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"home/IMG_2433.JPG\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2017-06-18T14:48:52.140Z","path":"archive/index.html","_id":"cj44ahgux000dzwvrv67jzui4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"jQuery的ajax方法拦截器","catalog":true,"date":"2017-06-19T14:40:34.000Z","subtitle":null,"header-img":"post/IMG_2440.JPG","keyword":"jquery,ajax,拦截","_content":"之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：\n> 如何侵入一个方法实现代理？\n\n> 在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？\n\n其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：\n```javascript\nvar ajaxBackup = $.ajax;\n$.ajax = function( opts ) {\n  // do sth.\n  ajaxBackup( opts );\n}\n```\n上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数`$.ajax( url, options )`，这就到导致了这种写法传入的`options`丢失了。。。 还有一个更严重的问题是，`$.ajax`方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：\n```javascript\nvar ajaxBackup = $.ajax;\n\n$.ajax = function( url, options ) {\n\n  if ( typeof url === \"object\" ) {\n    options = url;\n    url = undefined;\n  }\n\n  options = options || {};\n\n  var completeBackUp = options.complete,\n    successBackup = options.success,\n    errorBackup = options.error;\n  var urlBackup = url;\n  var optionBackup = $.extend( {}, options );\n\n  options.complete = function() {\n    // to do sth. after request is complete.\n\n    if ( $.isFunction( completeBackUp ) ) {\n      completeBackUp.apply( options.context, arguments );\n    }\n  }\n  options.success = function( data ) {\n    // to do sth. after request is successful.\n    // 这里相当于做了代理，请求成功回调执行前要做的事\n\n    // 这里则是对传入的success回调进行相应\n    if ( $.isFunction( successBackup ) ) {\n      successBackup.apply( options.context, arguments );\n    }\n  }\n  options.error = function() {\n    if ( $.isFunction( errorBackup ) ) {\n      errorBackup.apply( options.context, arguments );\n    }\n  }\n\n  // 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用\n  return ajaxBackup.apply( $, arguments );\n}\n```","source":"_posts/jQuery-ajax-intercept.md","raw":"---\ntitle: jQuery的ajax方法拦截器\ncatalog: true\ndate: 2017-06-19 22:40:34\nsubtitle:\nheader-img: post/IMG_2440.JPG\nkeyword: jquery,ajax,拦截\ntags:\n- jquery\n- ajax\n---\n之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：\n> 如何侵入一个方法实现代理？\n\n> 在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？\n\n其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：\n```javascript\nvar ajaxBackup = $.ajax;\n$.ajax = function( opts ) {\n  // do sth.\n  ajaxBackup( opts );\n}\n```\n上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数`$.ajax( url, options )`，这就到导致了这种写法传入的`options`丢失了。。。 还有一个更严重的问题是，`$.ajax`方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：\n```javascript\nvar ajaxBackup = $.ajax;\n\n$.ajax = function( url, options ) {\n\n  if ( typeof url === \"object\" ) {\n    options = url;\n    url = undefined;\n  }\n\n  options = options || {};\n\n  var completeBackUp = options.complete,\n    successBackup = options.success,\n    errorBackup = options.error;\n  var urlBackup = url;\n  var optionBackup = $.extend( {}, options );\n\n  options.complete = function() {\n    // to do sth. after request is complete.\n\n    if ( $.isFunction( completeBackUp ) ) {\n      completeBackUp.apply( options.context, arguments );\n    }\n  }\n  options.success = function( data ) {\n    // to do sth. after request is successful.\n    // 这里相当于做了代理，请求成功回调执行前要做的事\n\n    // 这里则是对传入的success回调进行相应\n    if ( $.isFunction( successBackup ) ) {\n      successBackup.apply( options.context, arguments );\n    }\n  }\n  options.error = function() {\n    if ( $.isFunction( errorBackup ) ) {\n      errorBackup.apply( options.context, arguments );\n    }\n  }\n\n  // 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用\n  return ajaxBackup.apply( $, arguments );\n}\n```","slug":"jQuery-ajax-intercept","published":1,"updated":"2017-06-19T15:07:23.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj44ahgsz0001zwvrsjujk88e","content":"<p>之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：</p>\n<blockquote>\n<p>如何侵入一个方法实现代理？</p>\n</blockquote>\n<blockquote>\n<p>在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？</p>\n</blockquote>\n<p>其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> opts </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do sth.</span></div><div class=\"line\">  ajaxBackup( opts );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数<code>$.ajax( url, options )</code>，这就到导致了这种写法传入的<code>options</code>丢失了。。。 还有一个更严重的问题是，<code>$.ajax</code>方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。<br>\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\"></div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> url, options </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> url === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    options = url;</div><div class=\"line\">    url = <span class=\"literal\">undefined</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> completeBackUp = options.complete,</div><div class=\"line\">    successBackup = options.success,</div><div class=\"line\">    errorBackup = options.error;</div><div class=\"line\">  <span class=\"keyword\">var</span> urlBackup = url;</div><div class=\"line\">  <span class=\"keyword\">var</span> optionBackup = $.extend( &#123;&#125;, options );</div><div class=\"line\"></div><div class=\"line\">  options.complete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is complete.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( completeBackUp ) ) &#123;</div><div class=\"line\">      completeBackUp.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.success = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is successful.</span></div><div class=\"line\">    <span class=\"comment\">// 这里相当于做了代理，请求成功回调执行前要做的事</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这里则是对传入的success回调进行相应</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( successBackup ) ) &#123;</div><div class=\"line\">      successBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.error = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( errorBackup ) ) &#123;</div><div class=\"line\">      errorBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> ajaxBackup.apply( $, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：</p>\n<blockquote>\n<p>如何侵入一个方法实现代理？</p>\n</blockquote>\n<blockquote>\n<p>在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？</p>\n</blockquote>\n<p>其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> opts </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do sth.</span></div><div class=\"line\">  ajaxBackup( opts );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数<code>$.ajax( url, options )</code>，这就到导致了这种写法传入的<code>options</code>丢失了。。。 还有一个更严重的问题是，<code>$.ajax</code>方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。<br>\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\"></div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> url, options </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> url === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    options = url;</div><div class=\"line\">    url = <span class=\"literal\">undefined</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> completeBackUp = options.complete,</div><div class=\"line\">    successBackup = options.success,</div><div class=\"line\">    errorBackup = options.error;</div><div class=\"line\">  <span class=\"keyword\">var</span> urlBackup = url;</div><div class=\"line\">  <span class=\"keyword\">var</span> optionBackup = $.extend( &#123;&#125;, options );</div><div class=\"line\"></div><div class=\"line\">  options.complete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is complete.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( completeBackUp ) ) &#123;</div><div class=\"line\">      completeBackUp.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.success = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is successful.</span></div><div class=\"line\">    <span class=\"comment\">// 这里相当于做了代理，请求成功回调执行前要做的事</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这里则是对传入的success回调进行相应</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( successBackup ) ) &#123;</div><div class=\"line\">      successBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.error = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( errorBackup ) ) &#123;</div><div class=\"line\">      errorBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> ajaxBackup.apply( $, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"如何完美阻止浏览器的滚动事件向上冒泡","catalog":true,"date":"2017-06-19T13:06:52.000Z","subtitle":null,"header-img":"post/IMG_2438.JPG","keyword":"事件,javascript","catagories":["javascript"],"_content":"\n我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(`document.addEventListener`方法的第三个参数设置为`true`则是冒泡, `false`则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到`event.stopPropagation()`这个方法，但是你可以先试试有用吗。#滑稽#\n\n没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自[http://blog.csdn.net/jyy_12/article/details/6878049](http://blog.csdn.net/jyy_12/article/details/6878049)）:\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.indexOf( 'Firefox' ) >= 0 ) { //firefox  \n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          _this.scrollTop += e.detail > 0 ? 60 : -60;\n          e.preventDefault();\n        }, false );\n      } else {\n        _this.onmousewheel = function( e ) {\n          e = e || window.event;\n          _this.scrollTop += e.wheelDelta > 0 ? -60 : 60;\n          return false;\n        };\n      }\n    } )\n  }\n} );\n$( \".box\" ).preventScroll();\n```\n然后问题就这么愉快的解决了！\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。\n\n其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为`e.preventDefault()`阻止了它的默认滚动行为，改用`this.scrollTop += e.detail > 0 ? 60 : -60`这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过`e.detail`或者`e.wheelDelta`是可以知道鼠标滚轮是在向上还是向下滚动的，`向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()`，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    return $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.toLowerCase().indexOf( \"firefox\" ) > 0 ) {\n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          // 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.detail < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n          // 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）\n          else if ( this.scrollTop === 0 && e.wheelDelta > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      } else {\n        _this.addEventListener( 'mousewheel', function( e ) {\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.wheelDelta < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          } else if ( this.scrollTop === 0 && e.wheelDelta > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      }\n      return this;\n    } );\n  }\n} );\n```\n是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。","source":"_posts/mousewheel-bubble.md","raw":"---\ntitle: 如何完美阻止浏览器的滚动事件向上冒泡\ncatalog: true\ndate: 2017-06-19 21:06:52\nsubtitle: \nheader-img: post/IMG_2438.JPG\nkeyword: 事件,javascript\ntags:\n- 事件\n- javascript\ncatagories: \n- javascript\n---\n\n我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(`document.addEventListener`方法的第三个参数设置为`true`则是冒泡, `false`则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到`event.stopPropagation()`这个方法，但是你可以先试试有用吗。#滑稽#\n\n没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自[http://blog.csdn.net/jyy_12/article/details/6878049](http://blog.csdn.net/jyy_12/article/details/6878049)）:\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.indexOf( 'Firefox' ) >= 0 ) { //firefox  \n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          _this.scrollTop += e.detail > 0 ? 60 : -60;\n          e.preventDefault();\n        }, false );\n      } else {\n        _this.onmousewheel = function( e ) {\n          e = e || window.event;\n          _this.scrollTop += e.wheelDelta > 0 ? -60 : 60;\n          return false;\n        };\n      }\n    } )\n  }\n} );\n$( \".box\" ).preventScroll();\n```\n然后问题就这么愉快的解决了！\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。\n\n其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为`e.preventDefault()`阻止了它的默认滚动行为，改用`this.scrollTop += e.detail > 0 ? 60 : -60`这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过`e.detail`或者`e.wheelDelta`是可以知道鼠标滚轮是在向上还是向下滚动的，`向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()`，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    return $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.toLowerCase().indexOf( \"firefox\" ) > 0 ) {\n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          // 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.detail < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n          // 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）\n          else if ( this.scrollTop === 0 && e.wheelDelta > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      } else {\n        _this.addEventListener( 'mousewheel', function( e ) {\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.wheelDelta < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          } else if ( this.scrollTop === 0 && e.wheelDelta > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      }\n      return this;\n    } );\n  }\n} );\n```\n是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。","slug":"mousewheel-bubble","published":1,"updated":"2017-06-19T14:44:43.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj44ahgt90002zwvrfl23weat","content":"<p>我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(<code>document.addEventListener</code>方法的第三个参数设置为<code>true</code>则是冒泡, <code>false</code>则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到<code>event.stopPropagation()</code>这个方法，但是你可以先试试有用吗。#滑稽#</p>\n<p>没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自<a href=\"http://blog.csdn.net/jyy_12/article/details/6878049\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jyy_12/article/details/6878049</a>）:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.indexOf( <span class=\"string\">'Firefox'</span> ) &gt;= <span class=\"number\">0</span> ) &#123; <span class=\"comment\">//firefox  </span></div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          _this.scrollTop += e.detail &gt; <span class=\"number\">0</span> ? <span class=\"number\">60</span> : <span class=\"number\">-60</span>;</div><div class=\"line\">          e.preventDefault();</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.onmousewheel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">          _this.scrollTop += e.wheelDelta &gt; <span class=\"number\">0</span> ? <span class=\"number\">-60</span> : <span class=\"number\">60</span>;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div><div class=\"line\">$( <span class=\"string\">\".box\"</span> ).preventScroll();</div></pre></td></tr></table></figure>\n<p>然后问题就这么愉快的解决了！<br>\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。</p>\n<p>其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为<code>e.preventDefault()</code>阻止了它的默认滚动行为，改用<code>this.scrollTop += e.detail &gt; 0 ? 60 : -60</code>这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过<code>e.detail</code>或者<code>e.wheelDelta</code>是可以知道鼠标滚轮是在向上还是向下滚动的，<code>向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()</code>，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.toLowerCase().indexOf( <span class=\"string\">\"firefox\"</span> ) &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.detail &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.wheelDelta &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'mousewheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.wheelDelta &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.wheelDelta &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125; );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div></pre></td></tr></table></figure>\n<p>是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(<code>document.addEventListener</code>方法的第三个参数设置为<code>true</code>则是冒泡, <code>false</code>则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到<code>event.stopPropagation()</code>这个方法，但是你可以先试试有用吗。#滑稽#</p>\n<p>没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自<a href=\"http://blog.csdn.net/jyy_12/article/details/6878049\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jyy_12/article/details/6878049</a>）:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.indexOf( <span class=\"string\">'Firefox'</span> ) &gt;= <span class=\"number\">0</span> ) &#123; <span class=\"comment\">//firefox  </span></div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          _this.scrollTop += e.detail &gt; <span class=\"number\">0</span> ? <span class=\"number\">60</span> : <span class=\"number\">-60</span>;</div><div class=\"line\">          e.preventDefault();</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.onmousewheel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">          _this.scrollTop += e.wheelDelta &gt; <span class=\"number\">0</span> ? <span class=\"number\">-60</span> : <span class=\"number\">60</span>;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div><div class=\"line\">$( <span class=\"string\">\".box\"</span> ).preventScroll();</div></pre></td></tr></table></figure>\n<p>然后问题就这么愉快的解决了！<br>\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。</p>\n<p>其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为<code>e.preventDefault()</code>阻止了它的默认滚动行为，改用<code>this.scrollTop += e.detail &gt; 0 ? 60 : -60</code>这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过<code>e.detail</code>或者<code>e.wheelDelta</code>是可以知道鼠标滚轮是在向上还是向下滚动的，<code>向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()</code>，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.toLowerCase().indexOf( <span class=\"string\">\"firefox\"</span> ) &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.detail &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.wheelDelta &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'mousewheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.wheelDelta &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.wheelDelta &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125; );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div></pre></td></tr></table></figure>\n<p>是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj44ahgsz0001zwvrsjujk88e","tag_id":"cj44ahgtg0003zwvruu5mrtjq","_id":"cj44ahgtp0006zwvrzgo6swcj"},{"post_id":"cj44ahgsz0001zwvrsjujk88e","tag_id":"cj44ahgtn0004zwvruowuflhc","_id":"cj44ahgtq0007zwvrhgqfvayz"},{"post_id":"cj44ahgt90002zwvrfl23weat","tag_id":"cj44ahgto0005zwvr6f3uivy7","_id":"cj44ahgtq0009zwvrtzxzopu7"},{"post_id":"cj44ahgt90002zwvrfl23weat","tag_id":"cj44ahgtq0008zwvrtgeylxjm","_id":"cj44ahgtr000azwvrvz63u9tk"}],"Tag":[{"name":"jquery","_id":"cj44ahgtg0003zwvruu5mrtjq"},{"name":"ajax","_id":"cj44ahgtn0004zwvruowuflhc"},{"name":"事件","_id":"cj44ahgto0005zwvr6f3uivy7"},{"name":"javascript","_id":"cj44ahgtq0008zwvrtgeylxjm"}]}}