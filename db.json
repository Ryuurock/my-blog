{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"804b9607a28a3a44273fc2ad51435c0dd99cb9c6","modified":1498880312279},{"_id":"source/404.md","hash":"0f8398a3bb033437b99b018f6e17cff0a4194ae8","modified":1498880312275},{"_id":"themes/beantech/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1498880312399},{"_id":"themes/beantech/_config.yml","hash":"7175f1385e6000b5f262ada8e186f802a02653b4","modified":1498880312409},{"_id":"source/_posts/cross-domain.md","hash":"1b5a4695e7e705929782bafe04d6e02338789041","modified":1498895440148},{"_id":"source/_posts/jQuery-ajax-intercept.md","hash":"7961888442a455f8962411fd306778652365dac2","modified":1498880312311},{"_id":"source/_posts/jQuery-pulgin-retract.md","hash":"684704fa0140a3b0f9af9c6f191077496fbfe431","modified":1498880312316},{"_id":"source/_posts/mousewheel-bubble.md","hash":"45ff549598d3b267fef2b088a7b071d4c970c466","modified":1498880312374},{"_id":"source/about/index.md","hash":"911c5982753c5c26c922a252026db65a27d57d59","modified":1498880312378},{"_id":"source/archive/index.md","hash":"fe06e7e4db7a3ea82d29747244a760709863e5c6","modified":1498880312383},{"_id":"source/tags/index.md","hash":"438360769478be9d01783d4997c0c36da09cd72d","modified":1498880312390},{"_id":"themes/beantech/layout/404.ejs","hash":"3f2d7438a9116acd327f968bbbfbc98d3fe398bf","modified":1498880312467},{"_id":"themes/beantech/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1498880312683},{"_id":"themes/beantech/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1498880312711},{"_id":"themes/beantech/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1498880312732},{"_id":"themes/beantech/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1498880312856},{"_id":"themes/beantech/layout/layout.ejs","hash":"b8d1cb552ace99f80000687697ff5ec297a29b02","modified":1498880312880},{"_id":"themes/beantech/layout/page.ejs","hash":"f7fc5282ad55131aa67dcde03c9189faa450a7c9","modified":1498880312936},{"_id":"themes/beantech/layout/post.ejs","hash":"919a7a894f928d5119550d99f9962e905343245d","modified":1498880313040},{"_id":"themes/beantech/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1498880313048},{"_id":"themes/beantech/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1498880312414},{"_id":"themes/beantech/languages/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1498880312419},{"_id":"themes/beantech/languages/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1498880312419},{"_id":"themes/beantech/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1498880312423},{"_id":"themes/beantech/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1498880312427},{"_id":"themes/beantech/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1498880312435},{"_id":"themes/beantech/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1498880312439},{"_id":"themes/beantech/languages/zh-CN.yml","hash":"0231cd406ca8cc03de886468f41c6dab0b4ffe9d","modified":1498880312447},{"_id":"themes/beantech/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1498880312451},{"_id":"source/_posts/jQuery-pulgin-retract/result.jpg","hash":"7a697d18e68af00c162a2c81e1037e277ed3e16e","modified":1498880312334},{"_id":"source/_posts/jQuery-pulgin-retract/result2.jpg","hash":"0646852486074c32347935aae4fb59996e73cc9b","modified":1498880312342},{"_id":"source/_posts/jQuery-pulgin-retract/result3.jpg","hash":"8b136575935ecefd52ff5b7116043703f79fd8e9","modified":1498880312350},{"_id":"source/_posts/jQuery-pulgin-retract/result4.jpg","hash":"5723665858f08f1b4602a3d09bb6c1cc8cb419a0","modified":1498880312354},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"9d1acd507d5e0c99d309a9ee750827a0cb5880d0","modified":1498880312523},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"5bfeb05c38772a13fb93c94713fa0c1a1a1926c4","modified":1498880312539},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"1738b3e78d27bee8e8acf953149ed14270c1a706","modified":1498880312559},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1498880312575},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1498880312579},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1498880312587},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1498880312595},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1498880312605},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1498880312619},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1498880312631},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1498880312635},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1498880312647},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"401c591f28f756e4e392e251636802aad48d2b09","modified":1498880312659},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1498880313144},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1498880313156},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1498880313164},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1498880313168},{"_id":"themes/beantech/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1498880313060},{"_id":"themes/beantech/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1498880313064},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"6772cefa1adadcc8e09a90683bd0d3bc67772352","modified":1498880313072},{"_id":"themes/beantech/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1498880313096},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1498880313105},{"_id":"themes/beantech/source/css/rocket.styl","hash":"4c1e1db0d6fe0654904adb9d4aefd46a533827d6","modified":1498880313113},{"_id":"themes/beantech/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1498880313118},{"_id":"themes/beantech/source/css/toc.styl","hash":"5cbd5465aaabf8c3f75cefe331b9e495d2c62bd9","modified":1498880313120},{"_id":"themes/beantech/source/css/widget.styl","hash":"696f6c974861e9ac59cb019750e81be734230591","modified":1498880313128},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1498880313240},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1498880313232},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1498880313248},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1498880313360},{"_id":"themes/beantech/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1498880313380},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1498880313372},{"_id":"themes/beantech/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1498880313388},{"_id":"source/_posts/cross-domain/20170627224652.jpg","hash":"a6896fe46db9ec5ca7ec212d4555c3a840279548","modified":1498880312291},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1498880313152},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1498880313084},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1498880313192},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1498880313336},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1498880313080},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1498880313107},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1498880313109},{"_id":"themes/beantech/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1498880313292},{"_id":"public/post-sitemap.xml","hash":"123b88ae0e4e721820ed70de7c1827fe5027e404","modified":1498896676959},{"_id":"public/page-sitemap.xml","hash":"690bb08e3c6c86e14c4b9001a0efd5b12d3384d9","modified":1498896677065},{"_id":"public/tag-sitemap.xml","hash":"a2b540158015d00f6817cdf673a37a775690b3e2","modified":1498896677101},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1498896677107},{"_id":"public/sitemap.xml","hash":"207a98616801370b1bf9cb732a27a74cd4d9820e","modified":1498896677107},{"_id":"public/404.html","hash":"7631a0902a840dfc99222f26fba635ff5d7e8fb0","modified":1498896677113},{"_id":"public/about/index.html","hash":"a70be65f2d5c649caa333370121646fee0139168","modified":1498896677113},{"_id":"public/tags/index.html","hash":"ad462aa7e5fae0334a840e25d3902ce7e0c35350","modified":1498896677113},{"_id":"public/2017/06/27/cross-domain/index.html","hash":"da8dc82a1076581514049670980a3d0da67a4db3","modified":1498896677113},{"_id":"public/2017/06/21/jQuery-pulgin-retract/index.html","hash":"96ceaf9249a6afefcd7196fc9a71c1f8970f603d","modified":1498896677113},{"_id":"public/2017/06/19/jQuery-ajax-intercept/index.html","hash":"84cfc19f7e5e3a343f80656361db610e303fdf7a","modified":1498896677113},{"_id":"public/2017/06/19/mousewheel-bubble/index.html","hash":"05c267a5f7a88b79b8b6e50ba763ea10a2bb5af6","modified":1498896677113},{"_id":"public/archive/index.html","hash":"fda8ea9ea8c62dea814d8181ee4204ba81246460","modified":1498896677114},{"_id":"public/archives/index.html","hash":"92596744fb864c5e5ee71e03ba1ec6a2cec81218","modified":1498896677114},{"_id":"public/archives/2017/index.html","hash":"fae74a41485d3c24d485bdfd0e80061d9897c50e","modified":1498896677114},{"_id":"public/archives/2017/06/index.html","hash":"8f96a83c59f17bb49f5630337a2c16647cd41665","modified":1498896677114},{"_id":"public/index.html","hash":"bee32da48ad5f46566d53331a8bfbed2df30e034","modified":1498896677114},{"_id":"public/tags/jQuery-plugin/index.html","hash":"f327bbc6da032b19d2fda92a3781ed2ecf29897d","modified":1498896677114},{"_id":"public/tags/javascript/index.html","hash":"c16a5f9c7ac3114892854aa2580e7965cbe7b72d","modified":1498896677114},{"_id":"public/tags/跨域/index.html","hash":"7efebbf96cc43148564b113877bd4ac2cb409334","modified":1498896677114},{"_id":"public/tags/jquery/index.html","hash":"62738e1e591a9efd2fe10322b8f9067adb0f0ac7","modified":1498896677114},{"_id":"public/tags/ajax/index.html","hash":"bccdad25fdfddbd924d633bcdb0cec83c01ad10c","modified":1498896677114},{"_id":"public/tags/事件/index.html","hash":"354f62ed064df58b5ef0d450a96ef4b3ddeaaece","modified":1498896677114},{"_id":"public/CNAME","hash":"804b9607a28a3a44273fc2ad51435c0dd99cb9c6","modified":1498896677129},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1498896677131},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1498896677131},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1498896677131},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1498896677131},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1498896677131},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1498896677131},{"_id":"public/2017/06/21/jQuery-pulgin-retract/result.jpg","hash":"7a697d18e68af00c162a2c81e1037e277ed3e16e","modified":1498896677131},{"_id":"public/2017/06/21/jQuery-pulgin-retract/result2.jpg","hash":"0646852486074c32347935aae4fb59996e73cc9b","modified":1498896677131},{"_id":"public/2017/06/21/jQuery-pulgin-retract/result3.jpg","hash":"8b136575935ecefd52ff5b7116043703f79fd8e9","modified":1498896677132},{"_id":"public/2017/06/21/jQuery-pulgin-retract/result4.jpg","hash":"5723665858f08f1b4602a3d09bb6c1cc8cb419a0","modified":1498896677132},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1498896677510},{"_id":"public/2017/06/27/cross-domain/20170627224652.jpg","hash":"a6896fe46db9ec5ca7ec212d4555c3a840279548","modified":1498896677517},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1498896677526},{"_id":"public/css/rocket.css","hash":"9a64eb003654226b3e8ee8a58ff06b4f502e79a0","modified":1498896677526},{"_id":"public/css/highlight.css","hash":"a3e7a068adcae6ee723e7e26fc2fddeba73f590b","modified":1498896677526},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1498896677526},{"_id":"public/css/toc.css","hash":"4a892d4d00d85f984c6aeba44a34648bb98f1861","modified":1498896677526},{"_id":"public/css/widget.css","hash":"bfb490dbb67fdfd1d1059b50ac3bb538c61c2bb9","modified":1498896677526},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1498896677526},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1498896677526},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1498896677526},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1498896677526},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1498896677526},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1498896677526},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1498896677526},{"_id":"public/css/beantech.min.css","hash":"1908715e5d600eb3c01bb181f92afed1dfa7a933","modified":1498896677526},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1498896677527},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1498896677527},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1498896677527},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1498896677527},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498896677527},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1498896677527},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1498896677527}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"home/404.JPG","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"home/404.JPG\"\n---\n","date":"2017-07-01T03:38:32.275Z","updated":"2017-07-01T03:38:32.275Z","path":"404.html","title":"","comments":1,"_id":"cj4l0d8pw0000qkuckqkmno6q","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"会不会有一天，时间真的能倒退，退回你的我的回不去的悠悠的岁月","header-img":"home/IMG_2434.JPG","comments":1,"_content":"\n> 你说啥，大声点！\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"会不会有一天，时间真的能倒退，退回你的我的回不去的悠悠的岁月\"\nheader-img: \"home/IMG_2434.JPG\"\ncomments: true\n---\n\n> 你说啥，大声点！\n","updated":"2017-07-01T03:38:32.378Z","path":"about/index.html","_id":"cj4l0d8rv000hqkucnzxmcuxn","content":"<blockquote>\n<p>你说啥，大声点！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>你说啥，大声点！</p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"home/IMG_2433.JPG","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"home/IMG_2433.JPG\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2017-07-01T03:38:32.383Z","path":"archive/index.html","_id":"cj4l0d8rx000iqkuczlndmgl8","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"home/IMG_2432.JPG","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"home/IMG_2432.JPG\"\n---\n","date":"2017-07-01T03:38:32.390Z","updated":"2017-07-01T03:38:32.390Z","path":"tags/index.html","comments":1,"_id":"cj4l0d8rz000kqkuc2xegetj6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"基于jQuery的轻量图片排版插件","catalog":true,"date":"2017-06-21T14:32:33.000Z","subtitle":"一个轻量的图片排版插件","header-img":"post/IMG_2454.JPG","_content":"\n之前因为公司项目需要，一个页面图片挺多的，并且图片的分辨率完全随机，这就对页面排版要求挺高的，目前最流行的解决方案就是使用纵向瀑布流。但是因为图片加载都是异步的，js插件在获取图片容器宽高时往往得到的都是还没完全加载的值，导致并不能达到需求要的效果。于是便抽业余时间写了这个插件，虽然最后因为种种原因没有用到这个插件，但是毕竟是自己付之劳动的成果于是就作了个记录 话不多说 直接上效果图\n\n![效果图](result.jpg)\n\n效果还是不赖吧 >_>\n\n> 下面是一些配置参数能简单改变排版\n\n* `x`: 对于每个排版的margin-right，`默认5px`;\n* `y`: 对于每个排版的margin-bottom，`默认5px`;\n* `target`: 相对于选择器的目标元素，`默认>*`;\n* `widthOffset`: 随机宽度偏移量，值越大每个项目的最大最小宽度差值越大，`默认50`（PS：过大或负数可能会造成crush）;\n* `horizontalSize`: 每行的列数，`默认4`;\n* `autoFullColumns`: 最后一行如果个数不满`horizontalSize`配置的个数，是否自动填充宽度，`默认false`;\n* `substractPx`: 在某些视网膜屏上，因为宽度的计算丢失精度导致每行项目的最后一个掉到下一行，造成crush，所以这个参数是在原来的基础上修复这个问题，一般情况不会用到这个配置项，`默认1px`;\n\n***\n`horizontalSize`为5的预览效果\n![效果图](result2.jpg)\n***\n`autoFullColumns`为true的预览效果\n![效果图](result3.jpg)\n`x、y`为1的预览效果\n![效果图](result4.jpg)\n***\n\n仓库地址[jQuery retract](https://github.com/Ryuurock/jQuery.retract)\n\n其实插件本什么有很多不足，比如遇到人像图很可能会造成“切头切脚”的情况，因为本身使用的background-image属性展示图片，并且background-size: cover，这就造成了很多地方看不到了，最好的解决方案是使用img标签来展示，并且根据给定的一个高度来动态计算出一行图片的宽高（ps：因为图片的宽高都不等，无法做到高度一定，在给定高度后任然会在这个值左右浮动），使其正好能填充一行，这样便不会造成“切头切脚”的情况了，前提是你要提前知道这些图片的宽高，或者的等到至少一组以上的图片宽高都加载到了才行。参照[百度图片](https://image.baidu.com/search/index?tn=baiduimage&ipn=r&ct=201326592&cl=2&lm=-1&st=-1&fr=&sf=1&fmq=1459502303089_R&pv=&ic=0&nc=1&z=&se=1&showtab=0&fb=0&width=&height=&face=0&istype=2&ie=utf-8&word=%E9%A3%8E%E6%99%AF)的效果也许您就明白了。\n\n可是万恶的百度这个组件代码是压缩的，而且并不抽象，并不抽象，并不抽象！鉴于压缩代码实在是很难一时间看明白，于是我就放弃了。\n\n其实对于上面的需求，是有一个完美的插件的[Justified-Gallery](https://github.com/miromannino/Justified-Gallery) 不管你是否提前拥有图片宽高，它都能完美加载排版出一个“画廊”，并且支持图片预览。大神的技术真的要学习啊 /笑哭。\n\n另外还是放上我这个项目的地址吧[jQuery-pulgin-retract]()\n\n","source":"_posts/jQuery-pulgin-retract.md","raw":"---\ntitle: 基于jQuery的轻量图片排版插件\ncatalog: true\ndate: 2017-06-21 22:32:33\nsubtitle: 一个轻量的图片排版插件\nheader-img: post/IMG_2454.JPG\ntags:\n- jQuery plugin\n- javascript\n---\n\n之前因为公司项目需要，一个页面图片挺多的，并且图片的分辨率完全随机，这就对页面排版要求挺高的，目前最流行的解决方案就是使用纵向瀑布流。但是因为图片加载都是异步的，js插件在获取图片容器宽高时往往得到的都是还没完全加载的值，导致并不能达到需求要的效果。于是便抽业余时间写了这个插件，虽然最后因为种种原因没有用到这个插件，但是毕竟是自己付之劳动的成果于是就作了个记录 话不多说 直接上效果图\n\n![效果图](result.jpg)\n\n效果还是不赖吧 >_>\n\n> 下面是一些配置参数能简单改变排版\n\n* `x`: 对于每个排版的margin-right，`默认5px`;\n* `y`: 对于每个排版的margin-bottom，`默认5px`;\n* `target`: 相对于选择器的目标元素，`默认>*`;\n* `widthOffset`: 随机宽度偏移量，值越大每个项目的最大最小宽度差值越大，`默认50`（PS：过大或负数可能会造成crush）;\n* `horizontalSize`: 每行的列数，`默认4`;\n* `autoFullColumns`: 最后一行如果个数不满`horizontalSize`配置的个数，是否自动填充宽度，`默认false`;\n* `substractPx`: 在某些视网膜屏上，因为宽度的计算丢失精度导致每行项目的最后一个掉到下一行，造成crush，所以这个参数是在原来的基础上修复这个问题，一般情况不会用到这个配置项，`默认1px`;\n\n***\n`horizontalSize`为5的预览效果\n![效果图](result2.jpg)\n***\n`autoFullColumns`为true的预览效果\n![效果图](result3.jpg)\n`x、y`为1的预览效果\n![效果图](result4.jpg)\n***\n\n仓库地址[jQuery retract](https://github.com/Ryuurock/jQuery.retract)\n\n其实插件本什么有很多不足，比如遇到人像图很可能会造成“切头切脚”的情况，因为本身使用的background-image属性展示图片，并且background-size: cover，这就造成了很多地方看不到了，最好的解决方案是使用img标签来展示，并且根据给定的一个高度来动态计算出一行图片的宽高（ps：因为图片的宽高都不等，无法做到高度一定，在给定高度后任然会在这个值左右浮动），使其正好能填充一行，这样便不会造成“切头切脚”的情况了，前提是你要提前知道这些图片的宽高，或者的等到至少一组以上的图片宽高都加载到了才行。参照[百度图片](https://image.baidu.com/search/index?tn=baiduimage&ipn=r&ct=201326592&cl=2&lm=-1&st=-1&fr=&sf=1&fmq=1459502303089_R&pv=&ic=0&nc=1&z=&se=1&showtab=0&fb=0&width=&height=&face=0&istype=2&ie=utf-8&word=%E9%A3%8E%E6%99%AF)的效果也许您就明白了。\n\n可是万恶的百度这个组件代码是压缩的，而且并不抽象，并不抽象，并不抽象！鉴于压缩代码实在是很难一时间看明白，于是我就放弃了。\n\n其实对于上面的需求，是有一个完美的插件的[Justified-Gallery](https://github.com/miromannino/Justified-Gallery) 不管你是否提前拥有图片宽高，它都能完美加载排版出一个“画廊”，并且支持图片预览。大神的技术真的要学习啊 /笑哭。\n\n另外还是放上我这个项目的地址吧[jQuery-pulgin-retract]()\n\n","slug":"jQuery-pulgin-retract","published":1,"updated":"2017-07-01T03:38:32.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4l0d8qp0001qkuchauh7qgz","content":"<p>之前因为公司项目需要，一个页面图片挺多的，并且图片的分辨率完全随机，这就对页面排版要求挺高的，目前最流行的解决方案就是使用纵向瀑布流。但是因为图片加载都是异步的，js插件在获取图片容器宽高时往往得到的都是还没完全加载的值，导致并不能达到需求要的效果。于是便抽业余时间写了这个插件，虽然最后因为种种原因没有用到这个插件，但是毕竟是自己付之劳动的成果于是就作了个记录 话不多说 直接上效果图</p>\n<p><img src=\"result.jpg\" alt=\"效果图\"></p>\n<p>效果还是不赖吧 &gt;_&gt;</p>\n<blockquote>\n<p>下面是一些配置参数能简单改变排版</p>\n</blockquote>\n<ul>\n<li><code>x</code>: 对于每个排版的margin-right，<code>默认5px</code>;</li>\n<li><code>y</code>: 对于每个排版的margin-bottom，<code>默认5px</code>;</li>\n<li><code>target</code>: 相对于选择器的目标元素，<code>默认&gt;*</code>;</li>\n<li><code>widthOffset</code>: 随机宽度偏移量，值越大每个项目的最大最小宽度差值越大，<code>默认50</code>（PS：过大或负数可能会造成crush）;</li>\n<li><code>horizontalSize</code>: 每行的列数，<code>默认4</code>;</li>\n<li><code>autoFullColumns</code>: 最后一行如果个数不满<code>horizontalSize</code>配置的个数，是否自动填充宽度，<code>默认false</code>;</li>\n<li><code>substractPx</code>: 在某些视网膜屏上，因为宽度的计算丢失精度导致每行项目的最后一个掉到下一行，造成crush，所以这个参数是在原来的基础上修复这个问题，一般情况不会用到这个配置项，<code>默认1px</code>;</li>\n</ul>\n<hr>\n<p><code>horizontalSize</code>为5的预览效果<br>\n<img src=\"result2.jpg\" alt=\"效果图\"></p>\n<hr>\n<p><code>autoFullColumns</code>为true的预览效果<br>\n<img src=\"result3.jpg\" alt=\"效果图\"><br>\n<code>x、y</code>为1的预览效果<br>\n<img src=\"result4.jpg\" alt=\"效果图\"></p>\n<hr>\n<p>仓库地址<a href=\"https://github.com/Ryuurock/jQuery.retract\" target=\"_blank\" rel=\"external\">jQuery retract</a></p>\n<p>其实插件本什么有很多不足，比如遇到人像图很可能会造成“切头切脚”的情况，因为本身使用的background-image属性展示图片，并且background-size: cover，这就造成了很多地方看不到了，最好的解决方案是使用img标签来展示，并且根据给定的一个高度来动态计算出一行图片的宽高（ps：因为图片的宽高都不等，无法做到高度一定，在给定高度后任然会在这个值左右浮动），使其正好能填充一行，这样便不会造成“切头切脚”的情况了，前提是你要提前知道这些图片的宽高，或者的等到至少一组以上的图片宽高都加载到了才行。参照<a href=\"https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fr=&amp;sf=1&amp;fmq=1459502303089_R&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E9%A3%8E%E6%99%AF\" target=\"_blank\" rel=\"external\">百度图片</a>的效果也许您就明白了。</p>\n<p>可是万恶的百度这个组件代码是压缩的，而且并不抽象，并不抽象，并不抽象！鉴于压缩代码实在是很难一时间看明白，于是我就放弃了。</p>\n<p>其实对于上面的需求，是有一个完美的插件的<a href=\"https://github.com/miromannino/Justified-Gallery\" target=\"_blank\" rel=\"external\">Justified-Gallery</a> 不管你是否提前拥有图片宽高，它都能完美加载排版出一个“画廊”，并且支持图片预览。大神的技术真的要学习啊 /笑哭。</p>\n<p>另外还是放上我这个项目的地址吧<a href=\"\">jQuery-pulgin-retract</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前因为公司项目需要，一个页面图片挺多的，并且图片的分辨率完全随机，这就对页面排版要求挺高的，目前最流行的解决方案就是使用纵向瀑布流。但是因为图片加载都是异步的，js插件在获取图片容器宽高时往往得到的都是还没完全加载的值，导致并不能达到需求要的效果。于是便抽业余时间写了这个插件，虽然最后因为种种原因没有用到这个插件，但是毕竟是自己付之劳动的成果于是就作了个记录 话不多说 直接上效果图</p>\n<p><img src=\"result.jpg\" alt=\"效果图\"></p>\n<p>效果还是不赖吧 &gt;_&gt;</p>\n<blockquote>\n<p>下面是一些配置参数能简单改变排版</p>\n</blockquote>\n<ul>\n<li><code>x</code>: 对于每个排版的margin-right，<code>默认5px</code>;</li>\n<li><code>y</code>: 对于每个排版的margin-bottom，<code>默认5px</code>;</li>\n<li><code>target</code>: 相对于选择器的目标元素，<code>默认&gt;*</code>;</li>\n<li><code>widthOffset</code>: 随机宽度偏移量，值越大每个项目的最大最小宽度差值越大，<code>默认50</code>（PS：过大或负数可能会造成crush）;</li>\n<li><code>horizontalSize</code>: 每行的列数，<code>默认4</code>;</li>\n<li><code>autoFullColumns</code>: 最后一行如果个数不满<code>horizontalSize</code>配置的个数，是否自动填充宽度，<code>默认false</code>;</li>\n<li><code>substractPx</code>: 在某些视网膜屏上，因为宽度的计算丢失精度导致每行项目的最后一个掉到下一行，造成crush，所以这个参数是在原来的基础上修复这个问题，一般情况不会用到这个配置项，<code>默认1px</code>;</li>\n</ul>\n<hr>\n<p><code>horizontalSize</code>为5的预览效果<br>\n<img src=\"result2.jpg\" alt=\"效果图\"></p>\n<hr>\n<p><code>autoFullColumns</code>为true的预览效果<br>\n<img src=\"result3.jpg\" alt=\"效果图\"><br>\n<code>x、y</code>为1的预览效果<br>\n<img src=\"result4.jpg\" alt=\"效果图\"></p>\n<hr>\n<p>仓库地址<a href=\"https://github.com/Ryuurock/jQuery.retract\" target=\"_blank\" rel=\"external\">jQuery retract</a></p>\n<p>其实插件本什么有很多不足，比如遇到人像图很可能会造成“切头切脚”的情况，因为本身使用的background-image属性展示图片，并且background-size: cover，这就造成了很多地方看不到了，最好的解决方案是使用img标签来展示，并且根据给定的一个高度来动态计算出一行图片的宽高（ps：因为图片的宽高都不等，无法做到高度一定，在给定高度后任然会在这个值左右浮动），使其正好能填充一行，这样便不会造成“切头切脚”的情况了，前提是你要提前知道这些图片的宽高，或者的等到至少一组以上的图片宽高都加载到了才行。参照<a href=\"https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fr=&amp;sf=1&amp;fmq=1459502303089_R&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E9%A3%8E%E6%99%AF\" target=\"_blank\" rel=\"external\">百度图片</a>的效果也许您就明白了。</p>\n<p>可是万恶的百度这个组件代码是压缩的，而且并不抽象，并不抽象，并不抽象！鉴于压缩代码实在是很难一时间看明白，于是我就放弃了。</p>\n<p>其实对于上面的需求，是有一个完美的插件的<a href=\"https://github.com/miromannino/Justified-Gallery\" target=\"_blank\" rel=\"external\">Justified-Gallery</a> 不管你是否提前拥有图片宽高，它都能完美加载排版出一个“画廊”，并且支持图片预览。大神的技术真的要学习啊 /笑哭。</p>\n<p>另外还是放上我这个项目的地址吧<a href=\"\">jQuery-pulgin-retract</a></p>\n"},{"title":"关于javscript的跨域问题的几种解决办法","catalog":true,"date":"2017-06-27T14:38:47.000Z","subtitle":null,"header-img":"post/IMG_24851.JPG","_content":"\t\t\t\n要说跨域，那得先认识什么是跨域，以下内容摘自网络\n![跨域](20170627224652.jpg)\n\n总而言之就是浏览器厂商为了web安全，使得不同域名的网页之间，无法通信，在博主的web开发历程中，主要遇到的是以下几种跨域的情况。\n　　　\n* web api访问时\n* iframe与父页面或顶层页面之间资源访问时\n* 访问opener时\n\n\n一般解决跨域问题可以从两个维度来解决\n* web前端通过一些技巧来解决\n* 后端的服务器解决\n\n### 通过前端手段解决\n通过前端来解决跨域问题是有限制的，但是能在不动后端代码的前提下已经能解决大部分的跨域问题了\n#### 解决web api的访问限制\n这种情况不少，因为开发模式的问题（比如你接的前端私活，给你提供了接口挂在外网，但是没有给你后端的源码，你无法启动一个本地服务来开发），或者你使用的是别人的服务（如一些实时天气数据接口），都会遇到跨域问题。因为服务器一般情况下并不会相应一个非本域名下的请求，这也是出于安全的考虑。但是我们可以通过jsonp来解决这个问题。\n我们都知道script标签可以引用来自任何域名下的js脚本文件（不存在的网站除外，你懂的），于是我们就可以通过这个特性来实现跨域访问一些api\n比如有一个请求是这样的\n```text\nhttp://example.com/getData\n```\n\n而我们的线上环境是http://mydomain.com，如果我们直接用`XmlHttpRequest`构造方法去发起这个请求，浏览器必定会抛出跨域的错误从而无法达到我们的预期，但是如果我们以这样的方式去请求这个接口\n```html\n<script src=\"http://example.com/getData\"></script>\n\n```\n你会说，这样就行了？ 慢着，这只是第一步，jsonp是需要通过后端的配合才能完成的。后端在此时的输出应该是一个执行的函数，实参是你要拿到的数据比如php\n```php\n// 这里只是一个例子，可能浏览器端不会执\n// 因为浏览器可能认为这只是一个字符串，具体的还请使用各个语言的特性使其输出为一个对象\necho 'callback({\"data\": \"hello world!\"})';\n```\n当这个“资源文件”请求完成后，js引擎便会执行这段脚本，从全局环境寻找`callback`这个函数，于是如果你事先定义了这个函数，如：\n```javascript\nwindow.callback = function( data ) {\n  console.log( data );\n  // DO STH...\n}\n```\n控制台便会输出服务端返回的`data`，但是一般情况下不会这样去请求一个jsonp类型的接口，往往是动态生成一个script标签写入到页面响应后再移除，并且具体响应的函数通过参数的形式传到后台，比如\n```html\n<script src=\"http://example.com/getData?callback=yourcallback\"></script>\n\n```\n`yourcallback`就是你定义的相应函数。通过jsonp的方式访问跨域的api有很多弊端，比如\n\n* 只能发起get请求，无法post数据\n* 执行上下文只能是global(如果你要通过callback参数传递一串context我也无异议)\n\n这是通过前端的办法（其实也有后端的配合）解决跨域api访问的限制。\n\n#### 解决iframe与父页面或顶层页面的通信(opener同理)\niframe与父页面之间的通信只能是根域名完全相同才行，比如：\n* iframe.com和a.iframe.com\n* a.iframe.com和b.iframe.com\n* iframe.com和iframe.com:8080\n\n如果根域名不同是无法通过常规手段进行通信的比如：\n* a.com与b.com（包括二级三级域名）\n* 1.1.1.1与a.com\n\n要解决同根域名之间的跨域（如获取子/父页面的dom、属性、方法）其实很简单，只需要将它们的domain都设置成根域名就好了\n```javascript\n// a.iframe.com下面的脚本\ndocument.domain = 'iframe.com';\n// b.iframe.com下面的脚本（iframe或opener）\ndocument.domain = 'iframe.com';\n```\n这样，同根域名页面之间的跨域问题便解决了，可以自由操纵dom，自由读写属性和方法\n\n### 通过后端服务解决\n也许你只是想解决webapi的跨域问题又拒绝使用jsonp这种感觉有点‘low’的解决方案，这时候就轮到服务端代码登场了，通过修改响应头信息来告知浏览器这个请求是否是安全可靠的。\n我们知道http协议的请求头/应头都有一串键值对，`Origin`这个属性会在我们的请求头里，`Access-Control-Allow-Origin`这个属性可能会在我们的响应头里（因为在本域名请求下这个属性有没有都无所谓），这就是我们能成功实现跨域接口访问的关键。当服务器端在`ccess-Control-Allow-Origin`里包含了我们的`Origin`，那浏览器就发起真正的请求，接口就能正确相应，这里以java为例\n```java\n// 这里是过滤器里面的方法\n@Override  \npublic void doFilter(ServletRequest req, ServletResponse res,  \n  FilterChain chain) throws IOException, ServletException {  \n  HttpServletResponse response = (HttpServletResponse) res;  \n  // 请求是什么Host，就响应什么\n  response.setHeader(\"Access-Control-Allow-Origin\", request.getHeader(\"Host\"));  \n  response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, DELETE\");  \n  response.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with\");  \n  chain.doFilter(req, res);  \n}  \n```\n这里有两点要注意\n* 浏览器检测到这是个跨域的请求时，会先发起一个请求方法为\"options\"的请求，所以服务端还必须得允许OPTIONS的请求类型\n* jquery的ajax的请求头会有x-requested-with这样的字样，`response.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with\")`这段代码依然是告诉浏览器允许这个自定义请求头\n往往允许一个跨域请求还要满足以上两点才能成功，总结一下浏览器的跨域api请求流程：\n\n1. 检测到这是一个跨域的请求（请求url的host和当前页面host不一样）;\n2. 先发起一个method为OPTIONS的请求，如果服务器的响应信息`Access-Control-Allow-Origin`没有我们的host，或者不允许OPTIONS请求方法，或者不允许自定义请求头`x-requested-with`，请求停止，抛出错误。否则：\n3. 再发一起一个正常的xhr请求，此时才会响应我们的逻辑回调函数\n\n在浏览器的开发者工具 network一栏里筛选xhr类型的请求可以清楚的看到浏览器对同一个请求发起了两次，第一次是OPTION请求，没有带上任何参数，第二次就是常规的请求\n\n\n以上则是博主对一些常见的跨域问题的解决方法的简单介绍，如有错误欢迎通过下方邮件指出。\n","source":"_posts/cross-domain.md","raw":"---\ntitle: 关于javscript的跨域问题的几种解决办法\ncatalog: true\ndate: 2017-06-27 22:38:47\nsubtitle:\nheader-img: post/IMG_24851.JPG\ntags:\n- javascript\n- 跨域\n---\n\t\t\t\n要说跨域，那得先认识什么是跨域，以下内容摘自网络\n![跨域](20170627224652.jpg)\n\n总而言之就是浏览器厂商为了web安全，使得不同域名的网页之间，无法通信，在博主的web开发历程中，主要遇到的是以下几种跨域的情况。\n　　　\n* web api访问时\n* iframe与父页面或顶层页面之间资源访问时\n* 访问opener时\n\n\n一般解决跨域问题可以从两个维度来解决\n* web前端通过一些技巧来解决\n* 后端的服务器解决\n\n### 通过前端手段解决\n通过前端来解决跨域问题是有限制的，但是能在不动后端代码的前提下已经能解决大部分的跨域问题了\n#### 解决web api的访问限制\n这种情况不少，因为开发模式的问题（比如你接的前端私活，给你提供了接口挂在外网，但是没有给你后端的源码，你无法启动一个本地服务来开发），或者你使用的是别人的服务（如一些实时天气数据接口），都会遇到跨域问题。因为服务器一般情况下并不会相应一个非本域名下的请求，这也是出于安全的考虑。但是我们可以通过jsonp来解决这个问题。\n我们都知道script标签可以引用来自任何域名下的js脚本文件（不存在的网站除外，你懂的），于是我们就可以通过这个特性来实现跨域访问一些api\n比如有一个请求是这样的\n```text\nhttp://example.com/getData\n```\n\n而我们的线上环境是http://mydomain.com，如果我们直接用`XmlHttpRequest`构造方法去发起这个请求，浏览器必定会抛出跨域的错误从而无法达到我们的预期，但是如果我们以这样的方式去请求这个接口\n```html\n<script src=\"http://example.com/getData\"></script>\n\n```\n你会说，这样就行了？ 慢着，这只是第一步，jsonp是需要通过后端的配合才能完成的。后端在此时的输出应该是一个执行的函数，实参是你要拿到的数据比如php\n```php\n// 这里只是一个例子，可能浏览器端不会执\n// 因为浏览器可能认为这只是一个字符串，具体的还请使用各个语言的特性使其输出为一个对象\necho 'callback({\"data\": \"hello world!\"})';\n```\n当这个“资源文件”请求完成后，js引擎便会执行这段脚本，从全局环境寻找`callback`这个函数，于是如果你事先定义了这个函数，如：\n```javascript\nwindow.callback = function( data ) {\n  console.log( data );\n  // DO STH...\n}\n```\n控制台便会输出服务端返回的`data`，但是一般情况下不会这样去请求一个jsonp类型的接口，往往是动态生成一个script标签写入到页面响应后再移除，并且具体响应的函数通过参数的形式传到后台，比如\n```html\n<script src=\"http://example.com/getData?callback=yourcallback\"></script>\n\n```\n`yourcallback`就是你定义的相应函数。通过jsonp的方式访问跨域的api有很多弊端，比如\n\n* 只能发起get请求，无法post数据\n* 执行上下文只能是global(如果你要通过callback参数传递一串context我也无异议)\n\n这是通过前端的办法（其实也有后端的配合）解决跨域api访问的限制。\n\n#### 解决iframe与父页面或顶层页面的通信(opener同理)\niframe与父页面之间的通信只能是根域名完全相同才行，比如：\n* iframe.com和a.iframe.com\n* a.iframe.com和b.iframe.com\n* iframe.com和iframe.com:8080\n\n如果根域名不同是无法通过常规手段进行通信的比如：\n* a.com与b.com（包括二级三级域名）\n* 1.1.1.1与a.com\n\n要解决同根域名之间的跨域（如获取子/父页面的dom、属性、方法）其实很简单，只需要将它们的domain都设置成根域名就好了\n```javascript\n// a.iframe.com下面的脚本\ndocument.domain = 'iframe.com';\n// b.iframe.com下面的脚本（iframe或opener）\ndocument.domain = 'iframe.com';\n```\n这样，同根域名页面之间的跨域问题便解决了，可以自由操纵dom，自由读写属性和方法\n\n### 通过后端服务解决\n也许你只是想解决webapi的跨域问题又拒绝使用jsonp这种感觉有点‘low’的解决方案，这时候就轮到服务端代码登场了，通过修改响应头信息来告知浏览器这个请求是否是安全可靠的。\n我们知道http协议的请求头/应头都有一串键值对，`Origin`这个属性会在我们的请求头里，`Access-Control-Allow-Origin`这个属性可能会在我们的响应头里（因为在本域名请求下这个属性有没有都无所谓），这就是我们能成功实现跨域接口访问的关键。当服务器端在`ccess-Control-Allow-Origin`里包含了我们的`Origin`，那浏览器就发起真正的请求，接口就能正确相应，这里以java为例\n```java\n// 这里是过滤器里面的方法\n@Override  \npublic void doFilter(ServletRequest req, ServletResponse res,  \n  FilterChain chain) throws IOException, ServletException {  \n  HttpServletResponse response = (HttpServletResponse) res;  \n  // 请求是什么Host，就响应什么\n  response.setHeader(\"Access-Control-Allow-Origin\", request.getHeader(\"Host\"));  \n  response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, DELETE\");  \n  response.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with\");  \n  chain.doFilter(req, res);  \n}  \n```\n这里有两点要注意\n* 浏览器检测到这是个跨域的请求时，会先发起一个请求方法为\"options\"的请求，所以服务端还必须得允许OPTIONS的请求类型\n* jquery的ajax的请求头会有x-requested-with这样的字样，`response.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with\")`这段代码依然是告诉浏览器允许这个自定义请求头\n往往允许一个跨域请求还要满足以上两点才能成功，总结一下浏览器的跨域api请求流程：\n\n1. 检测到这是一个跨域的请求（请求url的host和当前页面host不一样）;\n2. 先发起一个method为OPTIONS的请求，如果服务器的响应信息`Access-Control-Allow-Origin`没有我们的host，或者不允许OPTIONS请求方法，或者不允许自定义请求头`x-requested-with`，请求停止，抛出错误。否则：\n3. 再发一起一个正常的xhr请求，此时才会响应我们的逻辑回调函数\n\n在浏览器的开发者工具 network一栏里筛选xhr类型的请求可以清楚的看到浏览器对同一个请求发起了两次，第一次是OPTION请求，没有带上任何参数，第二次就是常规的请求\n\n\n以上则是博主对一些常见的跨域问题的解决方法的简单介绍，如有错误欢迎通过下方邮件指出。\n","slug":"cross-domain","published":1,"updated":"2017-07-01T07:50:40.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4l0d8qv0002qkucvfbo1g0h","content":"<p>要说跨域，那得先认识什么是跨域，以下内容摘自网络<br>\n<img src=\"20170627224652.jpg\" alt=\"跨域\"></p>\n<p>总而言之就是浏览器厂商为了web安全，使得不同域名的网页之间，无法通信，在博主的web开发历程中，主要遇到的是以下几种跨域的情况。</p>\n<ul>\n<li>web api访问时</li>\n<li>iframe与父页面或顶层页面之间资源访问时</li>\n<li>访问opener时</li>\n</ul>\n<p>一般解决跨域问题可以从两个维度来解决</p>\n<ul>\n<li>web前端通过一些技巧来解决</li>\n<li>后端的服务器解决</li>\n</ul>\n<h3 id=\"通过前端手段解决\">通过前端手段解决</h3>\n<p>通过前端来解决跨域问题是有限制的，但是能在不动后端代码的前提下已经能解决大部分的跨域问题了</p>\n<h4 id=\"解决web-api的访问限制\">解决web api的访问限制</h4>\n<p>这种情况不少，因为开发模式的问题（比如你接的前端私活，给你提供了接口挂在外网，但是没有给你后端的源码，你无法启动一个本地服务来开发），或者你使用的是别人的服务（如一些实时天气数据接口），都会遇到跨域问题。因为服务器一般情况下并不会相应一个非本域名下的请求，这也是出于安全的考虑。但是我们可以通过jsonp来解决这个问题。<br>\n我们都知道script标签可以引用来自任何域名下的js脚本文件（不存在的网站除外，你懂的），于是我们就可以通过这个特性来实现跨域访问一些api<br>\n比如有一个请求是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://example.com/getData</div></pre></td></tr></table></figure>\n<p>而我们的线上环境是http://mydomain.com，如果我们直接用<code>XmlHttpRequest</code>构造方法去发起这个请求，浏览器必定会抛出跨域的错误从而无法达到我们的预期，但是如果我们以这样的方式去请求这个接口</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://example.com/getData\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>你会说，这样就行了？ 慢着，这只是第一步，jsonp是需要通过后端的配合才能完成的。后端在此时的输出应该是一个执行的函数，实参是你要拿到的数据比如php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里只是一个例子，可能浏览器端不会执</span></div><div class=\"line\"><span class=\"comment\">// 因为浏览器可能认为这只是一个字符串，具体的还请使用各个语言的特性使其输出为一个对象</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'callback(&#123;\"data\": \"hello world!\"&#125;)'</span>;</div></pre></td></tr></table></figure>\n<p>当这个“资源文件”请求完成后，js引擎便会执行这段脚本，从全局环境寻找<code>callback</code>这个函数，于是如果你事先定义了这个函数，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( data );</div><div class=\"line\">  <span class=\"comment\">// DO STH...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台便会输出服务端返回的<code>data</code>，但是一般情况下不会这样去请求一个jsonp类型的接口，往往是动态生成一个script标签写入到页面响应后再移除，并且具体响应的函数通过参数的形式传到后台，比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://example.com/getData?callback=yourcallback\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>yourcallback</code>就是你定义的相应函数。通过jsonp的方式访问跨域的api有很多弊端，比如</p>\n<ul>\n<li>只能发起get请求，无法post数据</li>\n<li>执行上下文只能是global(如果你要通过callback参数传递一串context我也无异议)</li>\n</ul>\n<p>这是通过前端的办法（其实也有后端的配合）解决跨域api访问的限制。</p>\n<h4 id=\"解决iframe与父页面或顶层页面的通信opener同理\">解决iframe与父页面或顶层页面的通信(opener同理)</h4>\n<p>iframe与父页面之间的通信只能是根域名完全相同才行，比如：</p>\n<ul>\n<li><a href=\"http://iframe.xn--coma-221g.iframe.com\" target=\"_blank\" rel=\"external\">iframe.com和a.iframe.com</a></li>\n<li><a href=\"http://a.iframe.xn--comb-221g.iframe.com\" target=\"_blank\" rel=\"external\">a.iframe.com和b.iframe.com</a></li>\n<li><a href=\"http://iframe.xn--comiframe-sw9o.com:8080\" target=\"_blank\" rel=\"external\">iframe.com和iframe.com:8080</a></li>\n</ul>\n<p>如果根域名不同是无法通过常规手段进行通信的比如：</p>\n<ul>\n<li><a href=\"http://a.xn--comb-nb5f.com\" target=\"_blank\" rel=\"external\">a.com与b.com</a>（包括二级三级域名）</li>\n<li><a href=\"http://1.1.1.xn--1a-2v2c.com\" target=\"_blank\" rel=\"external\">1.1.1.1与a.com</a></li>\n</ul>\n<p>要解决同根域名之间的跨域（如获取子/父页面的dom、属性、方法）其实很简单，只需要将它们的domain都设置成根域名就好了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// a.iframe.com下面的脚本</span></div><div class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'iframe.com'</span>;</div><div class=\"line\"><span class=\"comment\">// b.iframe.com下面的脚本（iframe或opener）</span></div><div class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'iframe.com'</span>;</div></pre></td></tr></table></figure>\n<p>这样，同根域名页面之间的跨域问题便解决了，可以自由操纵dom，自由读写属性和方法</p>\n<h3 id=\"通过后端服务解决\">通过后端服务解决</h3>\n<p>也许你只是想解决webapi的跨域问题又拒绝使用jsonp这种感觉有点‘low’的解决方案，这时候就轮到服务端代码登场了，通过修改响应头信息来告知浏览器这个请求是否是安全可靠的。<br>\n我们知道http协议的请求头/应头都有一串键值对，<code>Origin</code>这个属性会在我们的请求头里，<code>Access-Control-Allow-Origin</code>这个属性可能会在我们的响应头里（因为在本域名请求下这个属性有没有都无所谓），这就是我们能成功实现跨域接口访问的关键。当服务器端在<code>ccess-Control-Allow-Origin</code>里包含了我们的<code>Origin</code>，那浏览器就发起真正的请求，接口就能正确相应，这里以java为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里是过滤器里面的方法</span></div><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res,  </span></span></div><div class=\"line\">  FilterChain chain) <span class=\"keyword\">throws</span> IOException, ServletException &#123;  </div><div class=\"line\">  HttpServletResponse response = (HttpServletResponse) res;  </div><div class=\"line\">  <span class=\"comment\">// 请求是什么Host，就响应什么</span></div><div class=\"line\">  response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, request.getHeader(<span class=\"string\">\"Host\"</span>));  </div><div class=\"line\">  response.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"POST, GET, OPTIONS, DELETE\"</span>);  </div><div class=\"line\">  response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"x-requested-with\"</span>);  </div><div class=\"line\">  chain.doFilter(req, res);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有两点要注意</p>\n<ul>\n<li>浏览器检测到这是个跨域的请求时，会先发起一个请求方法为&quot;options&quot;的请求，所以服务端还必须得允许OPTIONS的请求类型</li>\n<li>jquery的ajax的请求头会有x-requested-with这样的字样，<code>response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;x-requested-with&quot;)</code>这段代码依然是告诉浏览器允许这个自定义请求头<br>\n往往允许一个跨域请求还要满足以上两点才能成功，总结一下浏览器的跨域api请求流程：</li>\n</ul>\n<ol>\n<li>检测到这是一个跨域的请求（请求url的host和当前页面host不一样）;</li>\n<li>先发起一个method为OPTIONS的请求，如果服务器的响应信息<code>Access-Control-Allow-Origin</code>没有我们的host，或者不允许OPTIONS请求方法，或者不允许自定义请求头<code>x-requested-with</code>，请求停止，抛出错误。否则：</li>\n<li>再发一起一个正常的xhr请求，此时才会响应我们的逻辑回调函数</li>\n</ol>\n<p>在浏览器的开发者工具 network一栏里筛选xhr类型的请求可以清楚的看到浏览器对同一个请求发起了两次，第一次是OPTION请求，没有带上任何参数，第二次就是常规的请求</p>\n<p>以上则是博主对一些常见的跨域问题的解决方法的简单介绍，如有错误欢迎通过下方邮件指出。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>要说跨域，那得先认识什么是跨域，以下内容摘自网络<br>\n<img src=\"20170627224652.jpg\" alt=\"跨域\"></p>\n<p>总而言之就是浏览器厂商为了web安全，使得不同域名的网页之间，无法通信，在博主的web开发历程中，主要遇到的是以下几种跨域的情况。</p>\n<ul>\n<li>web api访问时</li>\n<li>iframe与父页面或顶层页面之间资源访问时</li>\n<li>访问opener时</li>\n</ul>\n<p>一般解决跨域问题可以从两个维度来解决</p>\n<ul>\n<li>web前端通过一些技巧来解决</li>\n<li>后端的服务器解决</li>\n</ul>\n<h3>通过前端手段解决</h3>\n<p>通过前端来解决跨域问题是有限制的，但是能在不动后端代码的前提下已经能解决大部分的跨域问题了</p>\n<h4>解决web api的访问限制</h4>\n<p>这种情况不少，因为开发模式的问题（比如你接的前端私活，给你提供了接口挂在外网，但是没有给你后端的源码，你无法启动一个本地服务来开发），或者你使用的是别人的服务（如一些实时天气数据接口），都会遇到跨域问题。因为服务器一般情况下并不会相应一个非本域名下的请求，这也是出于安全的考虑。但是我们可以通过jsonp来解决这个问题。<br>\n我们都知道script标签可以引用来自任何域名下的js脚本文件（不存在的网站除外，你懂的），于是我们就可以通过这个特性来实现跨域访问一些api<br>\n比如有一个请求是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://example.com/getData</div></pre></td></tr></table></figure>\n<p>而我们的线上环境是http://mydomain.com，如果我们直接用<code>XmlHttpRequest</code>构造方法去发起这个请求，浏览器必定会抛出跨域的错误从而无法达到我们的预期，但是如果我们以这样的方式去请求这个接口</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://example.com/getData\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>你会说，这样就行了？ 慢着，这只是第一步，jsonp是需要通过后端的配合才能完成的。后端在此时的输出应该是一个执行的函数，实参是你要拿到的数据比如php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里只是一个例子，可能浏览器端不会执</span></div><div class=\"line\"><span class=\"comment\">// 因为浏览器可能认为这只是一个字符串，具体的还请使用各个语言的特性使其输出为一个对象</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'callback(&#123;\"data\": \"hello world!\"&#125;)'</span>;</div></pre></td></tr></table></figure>\n<p>当这个“资源文件”请求完成后，js引擎便会执行这段脚本，从全局环境寻找<code>callback</code>这个函数，于是如果你事先定义了这个函数，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( data );</div><div class=\"line\">  <span class=\"comment\">// DO STH...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台便会输出服务端返回的<code>data</code>，但是一般情况下不会这样去请求一个jsonp类型的接口，往往是动态生成一个script标签写入到页面响应后再移除，并且具体响应的函数通过参数的形式传到后台，比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://example.com/getData?callback=yourcallback\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>yourcallback</code>就是你定义的相应函数。通过jsonp的方式访问跨域的api有很多弊端，比如</p>\n<ul>\n<li>只能发起get请求，无法post数据</li>\n<li>执行上下文只能是global(如果你要通过callback参数传递一串context我也无异议)</li>\n</ul>\n<p>这是通过前端的办法（其实也有后端的配合）解决跨域api访问的限制。</p>\n<h4>解决iframe与父页面或顶层页面的通信(opener同理)</h4>\n<p>iframe与父页面之间的通信只能是根域名完全相同才行，比如：</p>\n<ul>\n<li><a href=\"http://iframe.xn--coma-221g.iframe.com\" target=\"_blank\" rel=\"external\">iframe.com和a.iframe.com</a></li>\n<li><a href=\"http://a.iframe.xn--comb-221g.iframe.com\" target=\"_blank\" rel=\"external\">a.iframe.com和b.iframe.com</a></li>\n<li><a href=\"http://iframe.xn--comiframe-sw9o.com:8080\" target=\"_blank\" rel=\"external\">iframe.com和iframe.com:8080</a></li>\n</ul>\n<p>如果根域名不同是无法通过常规手段进行通信的比如：</p>\n<ul>\n<li><a href=\"http://a.xn--comb-nb5f.com\" target=\"_blank\" rel=\"external\">a.com与b.com</a>（包括二级三级域名）</li>\n<li><a href=\"http://1.1.1.xn--1a-2v2c.com\" target=\"_blank\" rel=\"external\">1.1.1.1与a.com</a></li>\n</ul>\n<p>要解决同根域名之间的跨域（如获取子/父页面的dom、属性、方法）其实很简单，只需要将它们的domain都设置成根域名就好了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// a.iframe.com下面的脚本</span></div><div class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'iframe.com'</span>;</div><div class=\"line\"><span class=\"comment\">// b.iframe.com下面的脚本（iframe或opener）</span></div><div class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'iframe.com'</span>;</div></pre></td></tr></table></figure>\n<p>这样，同根域名页面之间的跨域问题便解决了，可以自由操纵dom，自由读写属性和方法</p>\n<h3>通过后端服务解决</h3>\n<p>也许你只是想解决webapi的跨域问题又拒绝使用jsonp这种感觉有点‘low’的解决方案，这时候就轮到服务端代码登场了，通过修改响应头信息来告知浏览器这个请求是否是安全可靠的。<br>\n我们知道http协议的请求头/应头都有一串键值对，<code>Origin</code>这个属性会在我们的请求头里，<code>Access-Control-Allow-Origin</code>这个属性可能会在我们的响应头里（因为在本域名请求下这个属性有没有都无所谓），这就是我们能成功实现跨域接口访问的关键。当服务器端在<code>ccess-Control-Allow-Origin</code>里包含了我们的<code>Origin</code>，那浏览器就发起真正的请求，接口就能正确相应，这里以java为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里是过滤器里面的方法</span></div><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res,  </span></span></div><div class=\"line\">  FilterChain chain) <span class=\"keyword\">throws</span> IOException, ServletException &#123;  </div><div class=\"line\">  HttpServletResponse response = (HttpServletResponse) res;  </div><div class=\"line\">  <span class=\"comment\">// 请求是什么Host，就响应什么</span></div><div class=\"line\">  response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, request.getHeader(<span class=\"string\">\"Host\"</span>));  </div><div class=\"line\">  response.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"POST, GET, OPTIONS, DELETE\"</span>);  </div><div class=\"line\">  response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"x-requested-with\"</span>);  </div><div class=\"line\">  chain.doFilter(req, res);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有两点要注意</p>\n<ul>\n<li>浏览器检测到这是个跨域的请求时，会先发起一个请求方法为&quot;options&quot;的请求，所以服务端还必须得允许OPTIONS的请求类型</li>\n<li>jquery的ajax的请求头会有x-requested-with这样的字样，<code>response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;x-requested-with&quot;)</code>这段代码依然是告诉浏览器允许这个自定义请求头<br>\n往往允许一个跨域请求还要满足以上两点才能成功，总结一下浏览器的跨域api请求流程：</li>\n</ul>\n<ol>\n<li>检测到这是一个跨域的请求（请求url的host和当前页面host不一样）;</li>\n<li>先发起一个method为OPTIONS的请求，如果服务器的响应信息<code>Access-Control-Allow-Origin</code>没有我们的host，或者不允许OPTIONS请求方法，或者不允许自定义请求头<code>x-requested-with</code>，请求停止，抛出错误。否则：</li>\n<li>再发一起一个正常的xhr请求，此时才会响应我们的逻辑回调函数</li>\n</ol>\n<p>在浏览器的开发者工具 network一栏里筛选xhr类型的请求可以清楚的看到浏览器对同一个请求发起了两次，第一次是OPTION请求，没有带上任何参数，第二次就是常规的请求</p>\n<p>以上则是博主对一些常见的跨域问题的解决方法的简单介绍，如有错误欢迎通过下方邮件指出。</p>\n"},{"title":"jQuery的ajax方法拦截器","catalog":true,"date":"2017-06-19T14:40:34.000Z","subtitle":null,"header-img":"post/IMG_2440.JPG","keyword":"jquery,ajax,拦截","_content":"之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：\n> 如何侵入一个方法实现代理？\n\n> 在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？\n\n其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：\n```javascript\nvar ajaxBackup = $.ajax;\n$.ajax = function( opts ) {\n  // do sth.\n  ajaxBackup( opts );\n}\n```\n上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数`$.ajax( url, options )`，这就到导致了这种写法传入的`options`丢失了。。。 还有一个更严重的问题是，`$.ajax`方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：\n```javascript\nvar ajaxBackup = $.ajax;\n\n$.ajax = function( url, options ) {\n\n  if ( typeof url === \"object\" ) {\n    options = url;\n    url = undefined;\n  }\n\n  options = options || {};\n\n  var completeBackUp = options.complete,\n    successBackup = options.success,\n    errorBackup = options.error;\n  var urlBackup = url;\n  var optionBackup = $.extend( {}, options );\n\n  options.complete = function() {\n    // to do sth. after request is complete.\n\n    if ( $.isFunction( completeBackUp ) ) {\n      completeBackUp.apply( options.context, arguments );\n    }\n  }\n  options.success = function( data ) {\n    // to do sth. after request is successful.\n    // 这里相当于做了代理，请求成功回调执行前要做的事\n\n    // 这里则是对传入的success回调进行相应\n    if ( $.isFunction( successBackup ) ) {\n      successBackup.apply( options.context, arguments );\n    }\n  }\n  options.error = function() {\n    if ( $.isFunction( errorBackup ) ) {\n      errorBackup.apply( options.context, arguments );\n    }\n  }\n\n  // 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用\n  return ajaxBackup.apply( $, arguments );\n}\n```","source":"_posts/jQuery-ajax-intercept.md","raw":"---\ntitle: jQuery的ajax方法拦截器\ncatalog: true\ndate: 2017-06-19 22:40:34\nsubtitle:\nheader-img: post/IMG_2440.JPG\nkeyword: jquery,ajax,拦截\ntags:\n- jquery\n- ajax\n---\n之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：\n> 如何侵入一个方法实现代理？\n\n> 在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？\n\n其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：\n```javascript\nvar ajaxBackup = $.ajax;\n$.ajax = function( opts ) {\n  // do sth.\n  ajaxBackup( opts );\n}\n```\n上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数`$.ajax( url, options )`，这就到导致了这种写法传入的`options`丢失了。。。 还有一个更严重的问题是，`$.ajax`方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：\n```javascript\nvar ajaxBackup = $.ajax;\n\n$.ajax = function( url, options ) {\n\n  if ( typeof url === \"object\" ) {\n    options = url;\n    url = undefined;\n  }\n\n  options = options || {};\n\n  var completeBackUp = options.complete,\n    successBackup = options.success,\n    errorBackup = options.error;\n  var urlBackup = url;\n  var optionBackup = $.extend( {}, options );\n\n  options.complete = function() {\n    // to do sth. after request is complete.\n\n    if ( $.isFunction( completeBackUp ) ) {\n      completeBackUp.apply( options.context, arguments );\n    }\n  }\n  options.success = function( data ) {\n    // to do sth. after request is successful.\n    // 这里相当于做了代理，请求成功回调执行前要做的事\n\n    // 这里则是对传入的success回调进行相应\n    if ( $.isFunction( successBackup ) ) {\n      successBackup.apply( options.context, arguments );\n    }\n  }\n  options.error = function() {\n    if ( $.isFunction( errorBackup ) ) {\n      errorBackup.apply( options.context, arguments );\n    }\n  }\n\n  // 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用\n  return ajaxBackup.apply( $, arguments );\n}\n```","slug":"jQuery-ajax-intercept","published":1,"updated":"2017-07-01T03:38:32.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4l0d8r10004qkucr0363l4g","content":"<p>之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：</p>\n<blockquote>\n<p>如何侵入一个方法实现代理？</p>\n</blockquote>\n<blockquote>\n<p>在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？</p>\n</blockquote>\n<p>其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> opts </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do sth.</span></div><div class=\"line\">  ajaxBackup( opts );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数<code>$.ajax( url, options )</code>，这就到导致了这种写法传入的<code>options</code>丢失了。。。 还有一个更严重的问题是，<code>$.ajax</code>方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。<br>\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\"></div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> url, options </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> url === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    options = url;</div><div class=\"line\">    url = <span class=\"literal\">undefined</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> completeBackUp = options.complete,</div><div class=\"line\">    successBackup = options.success,</div><div class=\"line\">    errorBackup = options.error;</div><div class=\"line\">  <span class=\"keyword\">var</span> urlBackup = url;</div><div class=\"line\">  <span class=\"keyword\">var</span> optionBackup = $.extend( &#123;&#125;, options );</div><div class=\"line\"></div><div class=\"line\">  options.complete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is complete.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( completeBackUp ) ) &#123;</div><div class=\"line\">      completeBackUp.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.success = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is successful.</span></div><div class=\"line\">    <span class=\"comment\">// 这里相当于做了代理，请求成功回调执行前要做的事</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这里则是对传入的success回调进行相应</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( successBackup ) ) &#123;</div><div class=\"line\">      successBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.error = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( errorBackup ) ) &#123;</div><div class=\"line\">      errorBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> ajaxBackup.apply( $, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>之前因为一些原因，担任过一段时间公司的前端开发面试官，面试了很多人，问过这样两个问题：</p>\n<blockquote>\n<p>如何侵入一个方法实现代理？</p>\n</blockquote>\n<blockquote>\n<p>在不修改页面业务代码只修改一处代码的情况下，如何统一处理jQuery的ajax的response数据？</p>\n</blockquote>\n<p>其实上面两个问题本质是差不多的，不过不知道是表述不清楚，还是web前端这一块的人水平确实参差不齐，尽然没有一个让我觉得满意的答案，网上其实也有答案，不过很多都不严谨，导致ajax的默认行为遭到破坏，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> opts </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do sth.</span></div><div class=\"line\">  ajaxBackup( opts );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的方法在大多数情况下可以使用，但是这样写的人肯定不知道ajax方法可以有两个参数<code>$.ajax( url, options )</code>，这就到导致了这种写法传入的<code>options</code>丢失了。。。 还有一个更严重的问题是，<code>$.ajax</code>方法返回的是一个类Promise对象，上面的写法直接导致了返回值为undefined。<br>\n所以我认为应该这样写才能保证ajax方法的默认行为得到保护：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajaxBackup = $.ajax;</div><div class=\"line\"></div><div class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> url, options </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> url === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    options = url;</div><div class=\"line\">    url = <span class=\"literal\">undefined</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> completeBackUp = options.complete,</div><div class=\"line\">    successBackup = options.success,</div><div class=\"line\">    errorBackup = options.error;</div><div class=\"line\">  <span class=\"keyword\">var</span> urlBackup = url;</div><div class=\"line\">  <span class=\"keyword\">var</span> optionBackup = $.extend( &#123;&#125;, options );</div><div class=\"line\"></div><div class=\"line\">  options.complete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is complete.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( completeBackUp ) ) &#123;</div><div class=\"line\">      completeBackUp.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.success = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// to do sth. after request is successful.</span></div><div class=\"line\">    <span class=\"comment\">// 这里相当于做了代理，请求成功回调执行前要做的事</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这里则是对传入的success回调进行相应</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( successBackup ) ) &#123;</div><div class=\"line\">      successBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  options.error = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( $.isFunction( errorBackup ) ) &#123;</div><div class=\"line\">      errorBackup.apply( options.context, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 返回原先的ajax执行结果，不影响.done .then .always等方法的链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> ajaxBackup.apply( $, <span class=\"built_in\">arguments</span> );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"如何完美阻止浏览器的滚动事件向上冒泡","catalog":true,"date":"2017-06-19T13:06:52.000Z","subtitle":null,"header-img":"post/IMG_2438.JPG","keyword":"事件,javascript","catagories":["javascript"],"_content":"\n我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(`document.addEventListener`方法的第三个参数设置为`true`则是冒泡, `false`则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到`event.stopPropagation()`这个方法，但是你可以先试试有用吗。#滑稽#\n\n没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自[http://blog.csdn.net/jyy_12/article/details/6878049](http://blog.csdn.net/jyy_12/article/details/6878049)）:\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.indexOf( 'Firefox' ) >= 0 ) { //firefox  \n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          _this.scrollTop += e.detail > 0 ? 60 : -60;\n          e.preventDefault();\n        }, false );\n      } else {\n        _this.onmousewheel = function( e ) {\n          e = e || window.event;\n          _this.scrollTop += e.wheelDelta > 0 ? -60 : 60;\n          return false;\n        };\n      }\n    } )\n  }\n} );\n$( \".box\" ).preventScroll();\n```\n然后问题就这么愉快的解决了！\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。\n\n其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为`e.preventDefault()`阻止了它的默认滚动行为，改用`this.scrollTop += e.detail > 0 ? 60 : -60`这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过`e.detail`或者`e.wheelDelta`是可以知道鼠标滚轮是在向上还是向下滚动的，`向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()`，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    return $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.toLowerCase().indexOf( \"firefox\" ) > 0 ) {\n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          // 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.detail > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n          // 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）\n          else if ( this.scrollTop === 0 && e.detail < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      } else {\n        _this.addEventListener( 'mousewheel', function( e ) {\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.wheelDelta < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          } else if ( this.scrollTop === 0 && e.wheelDelta > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      }\n      return this;\n    } );\n  }\n} );\n```\n是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。","source":"_posts/mousewheel-bubble.md","raw":"---\ntitle: 如何完美阻止浏览器的滚动事件向上冒泡\ncatalog: true\ndate: 2017-06-19 21:06:52\nsubtitle: \nheader-img: post/IMG_2438.JPG\nkeyword: 事件,javascript\ntags:\n- 事件\n- javascript\ncatagories: \n- javascript\n---\n\n我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(`document.addEventListener`方法的第三个参数设置为`true`则是冒泡, `false`则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到`event.stopPropagation()`这个方法，但是你可以先试试有用吗。#滑稽#\n\n没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自[http://blog.csdn.net/jyy_12/article/details/6878049](http://blog.csdn.net/jyy_12/article/details/6878049)）:\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.indexOf( 'Firefox' ) >= 0 ) { //firefox  \n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          _this.scrollTop += e.detail > 0 ? 60 : -60;\n          e.preventDefault();\n        }, false );\n      } else {\n        _this.onmousewheel = function( e ) {\n          e = e || window.event;\n          _this.scrollTop += e.wheelDelta > 0 ? -60 : 60;\n          return false;\n        };\n      }\n    } )\n  }\n} );\n$( \".box\" ).preventScroll();\n```\n然后问题就这么愉快的解决了！\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。\n\n其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为`e.preventDefault()`阻止了它的默认滚动行为，改用`this.scrollTop += e.detail > 0 ? 60 : -60`这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过`e.detail`或者`e.wheelDelta`是可以知道鼠标滚轮是在向上还是向下滚动的，`向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()`，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：\n```javascript\n$.fn.extend( {\n  preventScroll: function() {\n    return $( this ).each( function() {\n      var _this = this;\n      if ( navigator.userAgent.toLowerCase().indexOf( \"firefox\" ) > 0 ) {\n        _this.addEventListener( 'DOMMouseScroll', function( e ) {\n          // 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.detail > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n          // 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）\n          else if ( this.scrollTop === 0 && e.detail < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      } else {\n        _this.addEventListener( 'mousewheel', function( e ) {\n          if ( this.scrollTop + this.clientHeight == this.scrollHeight && e.wheelDelta < 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          } else if ( this.scrollTop === 0 && e.wheelDelta > 0 ) {\n            e.preventDefault();\n            e.returnValue = false;\n          }\n        }, false );\n      }\n      return this;\n    } );\n  }\n} );\n```\n是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。","slug":"mousewheel-bubble","published":1,"updated":"2017-07-01T03:38:32.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4l0d8rt000gqkucwx15pusx","content":"<p>我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(<code>document.addEventListener</code>方法的第三个参数设置为<code>true</code>则是冒泡, <code>false</code>则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到<code>event.stopPropagation()</code>这个方法，但是你可以先试试有用吗。#滑稽#</p>\n<p>没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自<a href=\"http://blog.csdn.net/jyy_12/article/details/6878049\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jyy_12/article/details/6878049</a>）:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.indexOf( <span class=\"string\">'Firefox'</span> ) &gt;= <span class=\"number\">0</span> ) &#123; <span class=\"comment\">//firefox  </span></div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          _this.scrollTop += e.detail &gt; <span class=\"number\">0</span> ? <span class=\"number\">60</span> : <span class=\"number\">-60</span>;</div><div class=\"line\">          e.preventDefault();</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.onmousewheel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">          _this.scrollTop += e.wheelDelta &gt; <span class=\"number\">0</span> ? <span class=\"number\">-60</span> : <span class=\"number\">60</span>;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div><div class=\"line\">$( <span class=\"string\">\".box\"</span> ).preventScroll();</div></pre></td></tr></table></figure>\n<p>然后问题就这么愉快的解决了！<br>\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。</p>\n<p>其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为<code>e.preventDefault()</code>阻止了它的默认滚动行为，改用<code>this.scrollTop += e.detail &gt; 0 ? 60 : -60</code>这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过<code>e.detail</code>或者<code>e.wheelDelta</code>是可以知道鼠标滚轮是在向上还是向下滚动的，<code>向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()</code>，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.toLowerCase().indexOf( <span class=\"string\">\"firefox\"</span> ) &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.detail &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.detail &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'mousewheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.wheelDelta &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.wheelDelta &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125; );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div></pre></td></tr></table></figure>\n<p>是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们都知道，浏览器的事件一般是从元素的一层一层网上冒泡的(<code>document.addEventListener</code>方法的第三个参数设置为<code>true</code>则是冒泡, <code>false</code>则是捕获)，鼠标的滚轮事件也不例外，当某个滚动区域的内容滚动到最底部时，则会往上走，找到最近的父元素，继续滚动。在某些时候这是个很不错的设定，但是当页面的可滚动区域过多的时候，便会造成不好的用户体验。给人以“到处都在动”的感觉，可能你马上会想到<code>event.stopPropagation()</code>这个方法，但是你可以先试试有用吗。#滑稽#</p>\n<p>没错，我也是试了之后发现根本没什么卵用，所以就在网上找  代码如下：（摘自<a href=\"http://blog.csdn.net/jyy_12/article/details/6878049\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jyy_12/article/details/6878049</a>）:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.indexOf( <span class=\"string\">'Firefox'</span> ) &gt;= <span class=\"number\">0</span> ) &#123; <span class=\"comment\">//firefox  </span></div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          _this.scrollTop += e.detail &gt; <span class=\"number\">0</span> ? <span class=\"number\">60</span> : <span class=\"number\">-60</span>;</div><div class=\"line\">          e.preventDefault();</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.onmousewheel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">          _this.scrollTop += e.wheelDelta &gt; <span class=\"number\">0</span> ? <span class=\"number\">-60</span> : <span class=\"number\">60</span>;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div><div class=\"line\">$( <span class=\"string\">\".box\"</span> ).preventScroll();</div></pre></td></tr></table></figure>\n<p>然后问题就这么愉快的解决了！<br>\n于是我便开始愉快的开始测试，是的当当前滚动条滚动到滚动到顶部继续滚动的话，不会导致body或者其他父元素的滚动条继续滚动，但是总觉得哪里没对。不信的童鞋可以直接写代码测试一下。</p>\n<p>其他浏览器我没有测试过，用chrome的童鞋肯定发现了，惯性呢？滚动的惯性呢？是的因为<code>e.preventDefault()</code>阻止了它的默认滚动行为，改用<code>this.scrollTop += e.detail &gt; 0 ? 60 : -60</code>这种编程式的滚动，导致滚动没那么流畅了。肯定有人会说，再继续写代码模拟这个惯性不就好了吗？ 确实可以，但不觉得代价太大了点？是的，肯定有其他的解决办法。其实爱思考的人看到这里早已找到了答案，通过<code>e.detail</code>或者<code>e.wheelDelta</code>是可以知道鼠标滚轮是在向上还是向下滚动的，<code>向上滚，滚动到顶部，则e.preventDefault()，向下滚，滚动到最下面，也e.preventDefault()</code>，于是这个题目就这样完美的解决了，滚动的行为依然是浏览器的默认行为，但是它确实不再向上冒泡了，贴上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.extend( &#123;</div><div class=\"line\">  <span class=\"attr\">preventScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( navigator.userAgent.toLowerCase().indexOf( <span class=\"string\">\"firefox\"</span> ) &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'DOMMouseScroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最下面，并且鼠标向上（反正是一直往下拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.detail &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">// 滚动到最上面，并且鼠标向下（反正是一直往上拉那个动作）</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.detail &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _this.addEventListener( <span class=\"string\">'mousewheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> e </span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop + <span class=\"keyword\">this</span>.clientHeight == <span class=\"keyword\">this</span>.scrollHeight &amp;&amp; e.wheelDelta &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.scrollTop === <span class=\"number\">0</span> &amp;&amp; e.wheelDelta &gt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span> );</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125; );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; );</div></pre></td></tr></table></figure>\n<p>是的，这个问题就这么完美解决了，可能不是最佳实现，但是确实比上面的代码要更贴近浏览器原来的样子，我们在写代码的时候对于浏览器的默认行为，不管是从代码来说还是用户体验来说，都应该抱着谨慎的态度。</p>\n"}],"PostAsset":[{"_id":"source/_posts/cross-domain/20170627224652.jpg","slug":"20170627224652.jpg","post":"cj4l0d8qv0002qkucvfbo1g0h","modified":0,"renderable":0},{"_id":"source/_posts/jQuery-pulgin-retract/result.jpg","slug":"result.jpg","post":"cj4l0d8qp0001qkuchauh7qgz","modified":0,"renderable":0},{"_id":"source/_posts/jQuery-pulgin-retract/result2.jpg","slug":"result2.jpg","post":"cj4l0d8qp0001qkuchauh7qgz","modified":0,"renderable":0},{"_id":"source/_posts/jQuery-pulgin-retract/result3.jpg","slug":"result3.jpg","post":"cj4l0d8qp0001qkuchauh7qgz","modified":0,"renderable":0},{"_id":"source/_posts/jQuery-pulgin-retract/result4.jpg","slug":"result4.jpg","post":"cj4l0d8qp0001qkuchauh7qgz","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj4l0d8qp0001qkuchauh7qgz","tag_id":"cj4l0d8qz0003qkuc6ag16fpm","_id":"cj4l0d8r80007qkuclzt2chqw"},{"post_id":"cj4l0d8qp0001qkuchauh7qgz","tag_id":"cj4l0d8r60005qkucjnz93bh5","_id":"cj4l0d8r80008qkucrikxvdja"},{"post_id":"cj4l0d8qv0002qkucvfbo1g0h","tag_id":"cj4l0d8r60005qkucjnz93bh5","_id":"cj4l0d8ra000bqkuc1mizhuwh"},{"post_id":"cj4l0d8qv0002qkucvfbo1g0h","tag_id":"cj4l0d8r90009qkuc7slcyg0s","_id":"cj4l0d8ra000cqkuc4k23jgpq"},{"post_id":"cj4l0d8r10004qkucr0363l4g","tag_id":"cj4l0d8r9000aqkucan91qh89","_id":"cj4l0d8rb000eqkucpgc7lrpa"},{"post_id":"cj4l0d8r10004qkucr0363l4g","tag_id":"cj4l0d8ra000dqkuc8u9xhqdj","_id":"cj4l0d8rb000fqkuci4e4mtlf"},{"post_id":"cj4l0d8rt000gqkucwx15pusx","tag_id":"cj4l0d8ry000jqkuc63vhel9r","_id":"cj4l0d8s1000lqkucfydacy1b"},{"post_id":"cj4l0d8rt000gqkucwx15pusx","tag_id":"cj4l0d8r60005qkucjnz93bh5","_id":"cj4l0d8s2000mqkucgry5a2zs"}],"Tag":[{"name":"jQuery plugin","_id":"cj4l0d8qz0003qkuc6ag16fpm"},{"name":"javascript","_id":"cj4l0d8r60005qkucjnz93bh5"},{"name":"跨域","_id":"cj4l0d8r90009qkuc7slcyg0s"},{"name":"jquery","_id":"cj4l0d8r9000aqkucan91qh89"},{"name":"ajax","_id":"cj4l0d8ra000dqkuc8u9xhqdj"},{"name":"事件","_id":"cj4l0d8ry000jqkuc63vhel9r"}]}}